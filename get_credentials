# @brief        文字列分割用Split
# @details      第1引数にて指定した文字列を第2引数にて分割し配列にて返します。
# @params[in]   第1引数 分割対象の文字列を指定します。
# @params[in]   第2引数 デリミタを指定します。
# @return       array 分割された配列を返します。
function splitString() {
    IFS_ORIGINAL="$IFS"
    IFS=$2
    RET_ARY=($1)
    IFS="$IFS_ORIGINAL"
    echo ${RET_ARY[@]}
}
# @brief        ロール名取得
# @details      メタ情報にアクセスしてEC2に割り当てられたロール名を取得します
# @params[in]   (none)
# @return       string ロール名を返却します。
function getRoleName() {
    local ROLE_NAME=`curl -s --fail http://169.254.169.254/latest/meta-data/iam/security-credentials/`
    local RETVAL=$?
   if [ $RETVAL -ne 22 ]; then
       echo $ROLE_NAME
       return 0
   fi
   return 1
}
# @brief        EC2ロールのクレデンシャル情報を取得します。
# @params[in]   none
# @return       declareで取得できる配列変数の属性と値の構造情報を文字列で返します
# @retval       1 ロールの指定がされていません。
function getCredentials() {
    ROLE_NAME=$(getRoleName)
    if [ -z "$ROLE_NAME" ]; then
        return 1
    fi
    # クレデンシャルのJson情報を取得
    local ROLE_INFO=`curl -s --fail http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME/`
    # キー単位に分割
    local TEMP1=`echo $ROLE_INFO | grep -o '\".*\:.*\"' | tr -d " "`
    local TEMP2=($(splitString $TEMP1 ,))
    # 連想配列に格納
    declare -A RET
    for v in "${TEMP2[@]}"; do
        TEMP3=($(splitString ${v} :))
        KEY=`echo ${TEMP3[@]:0:1} | tr -d '"'`
        VAL=`echo ${TEMP3[@]:1:1} | tr -d '"'`
        RET[$KEY]=$VAL
    done
    # 文字列の構造定義に変換して返却
    local RET_DEF=$(declare -p RET)
    echo $RET_DEF
    return 0
}
